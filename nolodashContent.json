[{"categoryHeading":"Array","entries":[{"name":"chunk","manifest":{"fnSignature":"_.chunk(array, size?)","summary":"Creates an array of elements split into groups the length of `size`. If `array` can't be split evenly, the final chunk will be the remaining elements."},"description":"View this function [on Lodash's website](https://lodash.com/docs/4.17.15#chunk).\n","src":"function chunk(array, size = 1) {\n  const result = [];\n  for (let i = 0; i < array.length; i += size) {\n    result.push(array.slice(i, i + size));\n  }\n  return result;\n}\n"},{"name":"compact","manifest":{"fnSignature":"_.compact(array)","summary":"Creates an array with all falsey values removed. The values `false`, `null`, `0`, `\"\"`, `undefined`, and `NaN` are falsey."},"description":"View this function [on Lodash's website](https://lodash.com/docs/4.17.15#compact).\n\nThese are equivalent, alternative solutions. Pick the solution you find to be the most readable.\n\n```javascript\nconst value = array.filter(value => value);\n\nconst value = array.filter(Boolean);\n```\n","src":"// Instead of using Lodash's _.compact():\n//   const result = _.compact(array)\n// You can simply do this:\n\nconst result = array.filter(value => !!value);\n"},{"name":"concat","manifest":{"fnSignature":"_.concat(array, ...values)","summary":"Creates a new array concatenating `array` with any additional arrays and/or values."},"description":"View this function [on Lodash's website](https://lodash.com/docs/4.17.15#concat).\n\nThis replacement solution only works on arrays and other iterables. If some of your values might not be arrays, you can use this solution instead:\n\n```javascript\nconst array1 = [1, 2, 3];\nconst value1 = 4\nconst array2 = [5, 6, 7];\n\nconst result = [array1, value1, array2].flat();\n\n// Expected output: [1, 2, 3, 4, 5, 6, 7]\n```","src":"// Instead of using Lodash's _.concat():\n//   const result = _.concat(array1, array2, array3)\n// You can simply do this:\n\nconst result = [...array1, ...array2, ...array3];\n"},{"name":"difference","manifest":{"fnSignature":"_.difference(array, values?)","summary":"Creates an array of `array` values not included in the other given arrays using `SameValueZero` for equality comparisons. The order and references of result values are determined by the first array."},"description":"View this function [on Lodash's website](https://lodash.com/docs/4.17.15#difference).\n\nWhen dealing with larger arrays, you may wish to turn the second array (the one you use `.includes()` on) into a set first, since `.includes()` has an O(n) worst-case lookup time, while `yourSet.has()` has an O(1) lookup time.\n\nNote that both `array.includes()` and `set.has()` use [the SameValueZero comparison algorithm](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality) under-the-hood as well, just like Lodash's `_.difference()`.\n","src":"// Instead of using Lodash's _.difference():\n//   const result = _.difference(array1, array2)\n// You can simply do this:\n\nconst result = array1.filter(x => !array2.includes(x));\n\n// If you need to subtract multiple arrays, just merge them first. i.e. instead of this:\n//   const result = _.difference(array1, array2, array3)\n// You can simply do this:\n\nconst result = array1.filter(x => ![...array2, ...array3].includes(x));\n"},{"name":"differenceBy","manifest":{"fnSignature":"_.differenceBy(array, values?, iteratee?)","summary":"This method is like `_.difference` except that it accepts `iteratee` which is invoked for each element of `array` and `values` to generate the criterion by which they're compared. The order and references of result values are determined by the first array."},"description":"View this function [on Lodash's website](https://lodash.com/docs/4.17.15#differenceBy).\n","src":"function differenceBy(array, values = [], iteratee = x => x) {\n  const transformedValues = new Set(values.map(x => iteratee(x)));\n  return array.filter(x => !transformedValues.has(iteratee(x)));\n}\n"}]}]